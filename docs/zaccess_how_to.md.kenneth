# Using `zaccess` to Access Zuar-hosted Systems

!!! NOTES

	1. Set your max line length to 80 and autowrap lines.  The only exception is code
	   blocks, which can be longer.
	1. Make all links clickable
	1. No need to install git
	1. How often do I have to login?  How long does a login last?
	1. Will continue to allow current ssh access method until XX/XX/XX, after which, zaccess
	   will be mandatory.
	1. Instructions for bash completion.
    1. After making changes to the document, please review using MkDocs

## Introduction

Zuar products process and store a significant amount of confidential customer
information on a daily basis.  This carries with it a significant responsibility --
protecting customer data from unauthorized access.  Most often, this access is
controlled by user authentication in the user interface.  However, in some situations
command-line or other programmatic access to the files and services on a customer's
instance is required.  Until now, Zuar has used SSH keys to control this access.  There
are many challenges associated with the use of individual SSH keys to control access to
computer systems.  To address these problems and to better secure customer systems, Zuar
is transitioning to an internally developed tool called `zaccess`.  This note describes
how to use `zaccess` in situations where one previously used `ssh` and SSH keys.

`zaccess` is only used to control access to Zuar-hosted instances.  Access to
customer-hosted on-prem systems will continue to be managed as it is now.

## Access Control

`zaccess` differs from the current access system in that each user is individually given
access to one or more systems.  For example, Steve may be initially given access to
`stage.zuarbase.net` and `intradiem.zuarbase.net`.  Steve will only be able to access
these two systems using `zaccess`; it will not be possible for Steve to access other
instances.  If Steve later needs to access `khe.zuarbase.net`, he must request that
devops add the system to the list of systems he's authorized to access.

!!! NOTE

    * describe how people will get their user/pass
	* how will devops know which systems people can access for the initial setup?

## Preparing to Use `zaccess`

Before using `zaccess`, one must first:

1. Create a `ssh` keypair for use by `zaccess`
1. Install `vault`
1. Install `zaccess`
1. Get your username and password
1. Configure your environment
1. Test that `zaccess` is working

Each of these steps are described in the following sections.

### Create a `ssh` Keypair

=== "macOS"

	* howto
	* example

=== "Linux"

	* howto
	* example

=== "Windows"

	* howto
	* example

### Install Vault

`zaccess` uses Hashicorp's Vault software to generate temporary SSL certificates on a
per-user basis.  Zuar operates a Vault server at `vault.zuarbase.net` that contains
usernames, passwords, and the system(s) that each username is allowed to access.

A pre-requisite for using `zaccess` is installing Vault.  Download an executable for
your operating system and architecture [here](https://www.vaultproject.io/docs/install).

=== "macOS & Linux"

    These instructions assume that the executable was downloaded to
	`~/Downloads/vault`.  Adjust as necessary for your situation.

    1. **macOS only**: you must remove the SIP quarantine attribute from the vault
	   executable:
	   ```
	   $ xattr -d com.apple.quarantine ~/Downloads/vault
	   ```

    1. Place the executable in a directory that is
       located in your search path for commands.  For example, if `~/bin` is in your
       PATH:
	   ```
	   $ cp ~/Downloads/vault ~/bin
	   ```

	1. Confirm that the `vault` executable can be found and is working properly:
	   ```
	   $ vault version
	   Vault v1.10.0 (7738ec5d0d6f5bf94a809ee0f6ff0142cfa525a6)
	   ```
	   Your version number and hash may differ, but the version number should be at
	   least 1.10.0.

=== "Windows"

    For Windows, the following commands must be run in PowerShell by a non-root user:
	```
	irm get.scoop.sh | iex
	scoop install vault
	vault
	```

	If you get an error about your Execution Policy, open a different PowerShell window
	as administrator to change your Execution Policy to `bypass` with this command:
	```
	Set-ExecutionPolicy -ExecutionPolicy bypass
	```

	!!! Note

		Do we really need the full path?

	To verify that vault is installed correctly:
	```
	C:\Users\<USERNAME>c:\Users\<USERNAME>\Downloads\vault_1.10.3_windows_amd64\vault.exe version
	```
	You should see something like this:
	```
	Vault v1.10.0 (7738ec5d0d6f5bf94a809ee0f6ff0142cfa525a6)
	```

### Install `zaccess`

=== "macOS & Linux"

	* will have to disable SIP on macOS
	* how to

=== "Windows"

	* how to

### Configure Your Environment

To make using `zaccess` as convenient as possible, it is best to put a number of
variables and values in your execution environment.  How this is done depends upon your
operating system.

=== "macOS & Linux"

	In macOS and Linux, add the following environment variables to your `.bashrc`,
	`.bash_profile`, or whatever shell initialization file is appropriate:

    ```
	export VAULT_ADDR=https://vault.zuarbase.net:8200
	export VAULT_USER=<your-username>
	export VAULT_KEY=/full/path/to/.ssh/vault
	export VAULT_PASSWORD=<your-password>
	```

=== "Windows"

	In Windows, open the Systems Properties window and click the Environment Variables button.
	Create the following Variables with their respective values:
	```
	VAULT_ADDR: "https://vault.zuarbase.net:8200"
	VAULT_USER: <your-username>
	VAULT_KEY: "C:\Users\<username>\.ssh/vault" 
	VAULT_PASSWORD: <your-password>
	```

### Test `zaccess`

!!! NOTE

    How to test

## Using `zaccess`

Once setup, zaccess is really pretty simple to use. You only need to use a variation of
the following command to access a system that you are authorized to access:
```
$ zaccess [OPTIONS] HOSTNAME [PASSWORD]
```
  
!!! NOTE

    * Use os-based tabs for each example
	

## Linux Examples

1. Using `zaccess` with `ssh`:

!!! NOTE

    * show two examples
	  * animated gif showing choice of hosts/roles like below
	  * providing password on command line


```
$ ./zaccess stage.zuarbase.net
Password (will be hidden):
[?] please choose a policy for the hostname stage.zuarbase.net: stage-policy
   andy-klier-policy
   aziz-policy
   dev-policy
   khe-policy
   mitto-2-10-0-policy
 > stage-policy
ubuntu@stage-mitto:~$ 

```

!!! NOTE

    * Don't talk about how to get access in the examples section.
	  Do that in an earlier section.
    * What does the last sentence mean?
	* "policy" seems to start showing up in this section with no explanation.  Also, I
      though policy names matched host names, but the example above seems to show
      otherwise.  This is going to cause confusion.

You will be prompted for your vault password. Once the password is entered, if you have
not already chosen a policy, you will be prompted to select one. If you don't see a
policy for the instance you are logging into, please ask devops to add you to the
instance's vault group. You will not have to select a policy for 24 hours after successfully 
logging in with zaccess.


2. Using `zaccess` with `scp`
```
$ scp $(zaccess -i stage.zuarbase.net) README.md ubuntu@stage.zuarbase.net:
README.md                                                                          100%    0     0.0KB/s   00:00    
```

3. Using `zaccess` with `sftp`
```
$ sftp $(zaccess -i stage.zuarbase.net) ubuntu@stage.zuarbase.net:
Connected to stage.zuarbase.net.
Changing to: /home/ubuntu/.
sftp> 
```
## Windows Examples:

!!! NOTE 

    * Instead of First, Then, Then, just use bullets or numbers/letters.

First you have to do change directory into the cloned directory.
Then change directory into bin\windows10 or bin\windows11 as appropriate.
Then execute the appropriate zaccess command as shown below.

1. Using `zaccess` with `ssh`:
```
$ .\zaccess.exe stage.zuarbase.net
```
2. Using `zaccess` with `scp`:
```
$ scp $(.\zaccess.exe -i stage.zuarbase.net) README.md ubuntu@stage.zuarbase.net:
```
3. Using `zaccess` with `sftp`:
```
$ sftp $(.\zaccess.exe -i stage.zuarbase.net) ubuntu@stage.zuarbase.net:
```
 
## Other

!!! NOTE

    Can't this be simplified to just "how to change your password?"  

* If you forget your password, please put in a Jira Ticket for DevOps to reset it. After
  they do, you will need to do this:
  ```
  $ vault login -method=<newpass> username=$VAULT_USER
  ```

  Then reset your password to something you select by using this command:
  ```
  $ vault write auth/userpass/users/$VAULT_USER password="<newpass>"
  ```

* If you want to reset your password and still know your old one, you will need to do this:
```
vault write auth/userpass/users/$VAULT_USER password="newpass"

alternatively, login to vault and run the script ./change_pass.sh change_pass.sh will ensure the password is secure and will keep the password out of your bash history
```
## Technical Details

	Zaccess is built on Zuar's instance of something called Vault
	(https://www.vaultproject.io/docs/what-is-vault). Vault is an identity-based secrets and
	encryption and management system. This means that vault takes care of the validation
	(proving who you are) and authorization (determining what you can access) of users
	before providing them access. Zaccess will use the zuar vault instance to sign ssh keys.
