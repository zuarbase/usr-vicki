{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"mkdocs-markdown Documentation Template \u00b6 This is a template that uses MkDocs , Material for MkDocs , and GitHub workflows to automatically publish your Markdown content as GitHub Pages. Here's how to do it .","title":"mkdocs-markdown Documentation Template"},{"location":"#mkdocs-markdown-documentation-template","text":"This is a template that uses MkDocs , Material for MkDocs , and GitHub workflows to automatically publish your Markdown content as GitHub Pages. Here's how to do it .","title":"mkdocs-markdown Documentation Template"},{"location":"instructions/","text":"Instructions for Zuar's mkdocs-material Documentation \u00b6 This describes how to use Zuar's mkdocs-material documentation framework to automatically create public documentation from a repo in Zuar's github organization. Note the use of the word public -- if you follow the Quickstart below, whatever is created will be publicly accessible. Don't worry; mkdocs-material can be use to create private documentation as well. Quickstart \u00b6 In a hurry to create some public documentation with Markdown? Use this template to create a new repository in the Zuar organization. Never created a repository from a template repository before? Here's how . Let's assume your name is Steve and you wanted to create a repo for your personal documentation stash, and that you named your repo usr-steve . On your local system, clone your newly created repo: git clone git@github.com:zuarbase/usr-steve.git Create some sample content: cd usr-steve printf \"# Example Content\\n\\nfoo bar\" > docs/index.md Pull the Docker image for mkdocs-markdown : make pull You only need to do this once. View your documentation: make docs In your browser, navigate to http://0.0.0.0:8000/ and view your work. If you use an editor to modify your documentation, each time you save a file, the view in the browser will be updated to reflect your changes. At this point, you have built documentation locally, but your work has not been committed to your repo, it has not been pushed to github, and the HTML version has not been published. Let's commit your changes and push them to github: git add docs git commit -m'added example documentation' git push When your repo is pushed to github, a workflow is automatically run that builds the HTML version of your documents and publishes them as GitHub Pages. In 30 seconds to a few minutes, Steve's documentation will be publicly viewable at https://zuarbase.github.io/usr-steve/ . The documentation generated by this repo is publicly viewable at https://zuarbase.github.io/mkdocs-template/ . Private Documentation \u00b6 You want to create documentation with MM, but you don't want it to be public? You can still start with this repo as a template. Once you have it locally, run: cd <your-repo-name> git rm .github git commit -m'disable automatic publication of documentation' git push This disables the MM workflow and nothing will be published anywhere. You can continue to develop your documentation locally and view it locally, as described above. If have have another location or web server to which you want your content published, it's simple: make build Your HTML, CSS, and Javascript will be saved in <your-repo-name>/site/ . Simply rsync , scp , or otherwise copy the contents of the site directory to your desired destination. The Details \u00b6 MkDocs and Material for MkDocs are tools that allow one to author attractive, well-organized, and well-presented documentation by creating Markdown files. Writing simple Markdown in text files with any editor allow content creators to focus on content -- not fighting with frustratingly slow WYSIWIG single-page apps that think they know more about what you are doing than you do. Raw Markdown documents (files) are easy to read without any processing. Typically, however, Markdown files are processed to create documents in HTML, PDF, and other formats. MkDocs and Material for MkDocs (hereinafter referred to as MM) do a spectacular job of translation. Because Material for MkDocs is an extension to MkDocs, documentation for the former should always take precedence over the latter. MkDocs uses Python Markdown and Python Markdown Extensions . Material for MkDocs uses the same Python Markdown (confusingly) along with a different Python Markdown Extensions . Material for MkDoc's Python Markdown Extensions are actually based on PyMdown Extensions . Zuar has created a fork of mkdocs-material that contains customizations necessary for producing our internal and external documentation. This has been packaged as a Docker image that can be used as a GitHub workflow . Material for Markdown and the gh-pages workflow have been combined in this template to automatically process and publish Markdown using Zuar's forked Material for Markdown.","title":"Instructions for Zuar's `mkdocs-material` Documentation"},{"location":"instructions/#instructions-for-zuars-mkdocs-material-documentation","text":"This describes how to use Zuar's mkdocs-material documentation framework to automatically create public documentation from a repo in Zuar's github organization. Note the use of the word public -- if you follow the Quickstart below, whatever is created will be publicly accessible. Don't worry; mkdocs-material can be use to create private documentation as well.","title":"Instructions for Zuar's mkdocs-material Documentation"},{"location":"instructions/#quickstart","text":"In a hurry to create some public documentation with Markdown? Use this template to create a new repository in the Zuar organization. Never created a repository from a template repository before? Here's how . Let's assume your name is Steve and you wanted to create a repo for your personal documentation stash, and that you named your repo usr-steve . On your local system, clone your newly created repo: git clone git@github.com:zuarbase/usr-steve.git Create some sample content: cd usr-steve printf \"# Example Content\\n\\nfoo bar\" > docs/index.md Pull the Docker image for mkdocs-markdown : make pull You only need to do this once. View your documentation: make docs In your browser, navigate to http://0.0.0.0:8000/ and view your work. If you use an editor to modify your documentation, each time you save a file, the view in the browser will be updated to reflect your changes. At this point, you have built documentation locally, but your work has not been committed to your repo, it has not been pushed to github, and the HTML version has not been published. Let's commit your changes and push them to github: git add docs git commit -m'added example documentation' git push When your repo is pushed to github, a workflow is automatically run that builds the HTML version of your documents and publishes them as GitHub Pages. In 30 seconds to a few minutes, Steve's documentation will be publicly viewable at https://zuarbase.github.io/usr-steve/ . The documentation generated by this repo is publicly viewable at https://zuarbase.github.io/mkdocs-template/ .","title":"Quickstart"},{"location":"instructions/#private-documentation","text":"You want to create documentation with MM, but you don't want it to be public? You can still start with this repo as a template. Once you have it locally, run: cd <your-repo-name> git rm .github git commit -m'disable automatic publication of documentation' git push This disables the MM workflow and nothing will be published anywhere. You can continue to develop your documentation locally and view it locally, as described above. If have have another location or web server to which you want your content published, it's simple: make build Your HTML, CSS, and Javascript will be saved in <your-repo-name>/site/ . Simply rsync , scp , or otherwise copy the contents of the site directory to your desired destination.","title":"Private Documentation"},{"location":"instructions/#the-details","text":"MkDocs and Material for MkDocs are tools that allow one to author attractive, well-organized, and well-presented documentation by creating Markdown files. Writing simple Markdown in text files with any editor allow content creators to focus on content -- not fighting with frustratingly slow WYSIWIG single-page apps that think they know more about what you are doing than you do. Raw Markdown documents (files) are easy to read without any processing. Typically, however, Markdown files are processed to create documents in HTML, PDF, and other formats. MkDocs and Material for MkDocs (hereinafter referred to as MM) do a spectacular job of translation. Because Material for MkDocs is an extension to MkDocs, documentation for the former should always take precedence over the latter. MkDocs uses Python Markdown and Python Markdown Extensions . Material for MkDocs uses the same Python Markdown (confusingly) along with a different Python Markdown Extensions . Material for MkDoc's Python Markdown Extensions are actually based on PyMdown Extensions . Zuar has created a fork of mkdocs-material that contains customizations necessary for producing our internal and external documentation. This has been packaged as a Docker image that can be used as a GitHub workflow . Material for Markdown and the gh-pages workflow have been combined in this template to automatically process and publish Markdown using Zuar's forked Material for Markdown.","title":"The Details"}]}